# -*- coding: utf-8 -*-
"""LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/144tlAHVOF7aI5J3_06LYaLimaViGBNK4
"""

import numpy as np 
import pandas as pd 
from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D
from keras.models import Sequential
from sklearn.feature_extraction.text import CountVectorizer
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
from keras.utils.np_utils import to_categorical
from keras.callbacks import EarlyStopping
# import os
# print(os.listdir("../input"))

data = pd.read_csv('/content/LSTM.csv', usecols=['Tweets', 'aggression'])
data.head()

data.aggression.value_counts()

num_of_categories = 3200
shuffled = data.reindex(np.random.permutation(data.index))
NAG = shuffled[shuffled['aggression'] == 'NAG'][:num_of_categories]
CAG = shuffled[shuffled['aggression'] == 'CAG'][:num_of_categories]
OAG = shuffled[shuffled['aggression'] == 'OAG'][:num_of_categories]
concated = pd.concat([NAG, CAG, OAG], ignore_index=True)
#Shuffle the dataset
concated = concated.reindex(np.random.permutation(concated.index))
concated['LABEL'] = 0

#One-hot encode the lab
concated.loc[concated['aggression'] == 'NAG', 'LABEL'] = 0
concated.loc[concated['aggression'] == 'CAG', 'LABEL'] = 1
concated.loc[concated['aggression'] == 'OAG', 'LABEL'] = 2
print(concated['LABEL'][:10])
labels = to_categorical(concated['LABEL'], num_classes=3)
print(labels[:10])
if 'aggression' in concated.keys():
    concated.drop(['aggression'], axis=1)

n_most_common_words = 8000
max_len = 130
tokenizer = Tokenizer(num_words=n_most_common_words, filters='!"#$%&()*+,-./:;<=>?@[\]^_`{|}~', lower=True)
tokenizer.fit_on_texts(concated['Tweets'].values)
sequences = tokenizer.texts_to_sequences(concated['Tweets'].values)
word_index = tokenizer.word_index
print('Found %s unique tokens.' % len(word_index))

X = pad_sequences(sequences, maxlen=max_len)

X_train, X_test, y_train, y_test = train_test_split(X , labels, test_size=0.25, random_state=42)

epochs = 10
emb_dim = 128
batch_size = 256
labels[:2]

print((X_train.shape, y_train.shape, X_test.shape, y_test.shape))

model = Sequential()
model.add(Embedding(n_most_common_words, emb_dim, input_length=X.shape[1]))
model.add(SpatialDropout1D(0.7))
model.add(LSTM(64, dropout=0.7, recurrent_dropout=0.7))
model.add(Dense(3, activation='softmax'))
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['acc'])
print(model.summary())
history = model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size,validation_split=0.2,callbacks=[EarlyStopping(monitor='val_loss',patience=7, min_delta=0.0001)])

accr = model.evaluate(X_test,y_test)
print('Test set\n  Loss: {:0.3f}\n  Accuracy: {:0.3f}'.format(accr[0],accr[1]))

import matplotlib.pyplot as plt

acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(1, len(acc) + 1)

plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()

plt.figure()

plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()

txt = ["Keeks is a bitch she curves everyone lol I walked into a conversation like this. Smh"]
seq = tokenizer.texts_to_sequences(txt)
padded = pad_sequences(seq, maxlen=max_len)
pred = model.predict(padded)
labels = ['NAG', 'CAG', 'OAG']
print(pred, labels[np.argmax(pred)])